alCaRecoMatrix = { 'cosmics'        : { 'Cosmics'               : [ 'TkAlCosmics0T',
                                                                    'HcalCalHOCosmics',
                                                                    'DtCalibCosmics',
                                                                    'MuAlGlobalCosmics',
                                                                    ],
                                        'ExpressCosmics'        : [ 'SiStripCalZeroBias',
                                                                    'SiStripPCLHistos',
                                                                    'TkAlCosmics0T',
                                                                    'DtCalibCosmics',
                                                                    ],
                                        'HcalHPDNoise'          : [ ],
                                        'MinimumBias'           : [ 'SiStripCalZeroBias',
                                                                    'TkAlMinBias',
                                                                    ],
                                        'NoBPTX'                : [ ],
                                        },
                   'pp'             : { 'Commissioning'         : [ 'HcalCalIsoTrk', ],
                                        'DoubleElectron'        : [ 'EcalCalZElectron',
                                                                    'EcalUncalZElectron',
                                                                    ],
                                        'DoubleMu'              : [ 'TkAlZMuMu',
                                                                    'DtCalib',
                                                                    'MuAlCalIsolatedMu',
                                                                    'MuAlOverlaps',
                                                                    ],
                                        'DoubleMuParked'        : [ 'TkAlZMuMu',
                                                                    'DtCalib',
                                                                    'MuAlCalIsolatedMu',
                                                                    'MuAlOverlaps',
                                                                    ],
                                        'MinimumBias'           : [ 'SiStripCalMinBias',
                                                                    'TkAlMinBias',
                                                                    ],
                                        'MuOnia'                : [ 'TkAlJpsiMuMu',
                                                                    'TkAlUpsilonMuMu',
                                                                    ],
                                        'MuOniaParked'          : [ 'TkAlJpsiMuMu',
                                                                    'TkAlUpsilonMuMu',
                                                                    ],
                                        'SingleElectron'        : [ 'EcalCalWElectron',
                                                                    'EcalUncalWElectron',
                                                                    ],
                                        'SingleMu'              : [ 'TkAlMuonIsolated',
                                                                    'DtCalib',
                                                                    'MuAlCalIsolatedMu',
                                                                    'MuAlOverlaps',
                                                                    ],
                                        'StreamExpress'         : [ 'SiStripCalMinBias',
                                                                    'SiStripCalZeroBias',
                                                                    'SiStripPCLHistos',
                                                                    'TkAlMinBias',
                                                                    'DtCalib',
                                                                    'MuAlCalIsolatedMu',
                                                                    ],
                                        },
                   'hcalnzs'        : { 'HcalNZS'               : [ 'HcalCalMinBias', ], },
                   'AlCaLumiPixels' : { 'AlCaLumiPixels'        : [ 'LumiPixels', ], },
                   'AlCaTestEnable' : { 'TestEnablesEcalHcal'   : [ 'HcalCalPedestals', ],
                                        'TestEnablesEcalHcalDT' : [ 'HcalCalPedestals', ],
                                        'TestEnablesTracker'    : [ 'TkAlLAS', ],
                                        },
                   'cosmicsRun2'    : { 'Cosmics'               : [ 'TkAlCosmics0T',
                                                                    'HcalCalHOCosmics',
                                                                    'DtCalibCosmics',
                                                                    'MuAlGlobalCosmics',
                                                                    ],
                                        'ExpressCosmics'        : [ 'SiStripCalZeroBias',
                                                                    'SiStripPCLHistos',
                                                                    'TkAlCosmics0T',
                                                                    'DtCalibCosmics',
                                                                    ],
                                        'HcalHPDNoise'          : [ ],
                                        'MinimumBias'           : [ 'SiStripCalZeroBias',
                                                                    'TkAlMinBias',
                                                                    ],
                                        'NoBPTX'                : [ ],
                                        },
                   'ppRun2'         : { 'Commissioning'         : [ 'HcalCalIsoTrk', ],
                                        'Charmonium'            : [ 'TkAlJpsiMuMu', ],
                                        'DoubleEG'              : [ 'EcalCalZElectron',
                                                                    'EcalUncalZElectron',
                                                                    'HcalCalIterativePhiSym',
                                                                    ],
                                        'DoubleMu'              : [ 'TkAlZMuMu',
                                                                    'MuAlCalIsolatedMu',
                                                                    'MuAlOverlaps',
                                                                    'MuAlZMuMu',
                                                                    ],
                                        'HLTPhysics'            : [ 'SiStripCalMinBias',
                                                                    'TkAlMinBias',
                                                                    ],
                                        'JetHT'                 : [ 'HcalCalDijets', ],
                                        'MET'                   : [ 'HcalCalNoise', ],
                                        'MuOnia'                : [ 'TkAlUpsilonMuMu', ],
                                        'SingleElectron'        : [ 'EcalCalWElectron',
                                                                    'EcalUncalWElectron',
                                                                    'EcalCalZElectron',
                                                                    'EcalUncalZElectron',
                                                                    'HcalCalIterativePhiSym',
                                                                    ],
                                        'SingleMu'              : [ 'TkAlMuonIsolated',
                                                                    'HcalCalIterativePhiSym',
                                                                    'DtCalib',
                                                                    'MuAlCalIsolatedMu',
                                                                    'MuAlOverlaps',
                                                                    'MuAlZMuMu',
                                                                    ],
                                        'SinglePhoton'          : [ 'HcalCalGammaJet', ],
                                        'StreamExpress'         : [ 'SiStripCalMinBias',
                                                                    'SiStripCalZeroBias',
                                                                    'SiStripPCLHistos',
                                                                    'TkAlMinBias',
                                                                    'DtCalib',
                                                                    ],
                                        'ZeroBias'              : [ 'SiStripCalZeroBias',
                                                                    'TkAlMinBias',
                                                                    'LumiPixelsMinBias',
                                                                    ],
                                        },
                 'hcalnzsRun2'      : { 'HcalNZS'               : [ 'HcalCalMinBias', ], },
                 }

def buildConcatStringOfAlCaReco( pdList, matrix ):
    """Takes a list of primary datasets (PDs)
       and the AlCaRecoMatrix entry for a scenario (a dictionary),
       and returns a string with all the AlCaRecos for the selected PDs
       separated by the '+' character without duplicates."""
    alCaRecoList = []
    for pd in pdList:
        alCaRecoList.extend( matrix[ pd ] )
    # remove duplicates converting to a set
    alCaRecoList = set( alCaRecoList )
    stringList = '+'.join( alCaRecoList )
    return stringList

# Update the lists anytime a new PD is added to the matrix
autoAlca = { 'allForExpress'            : buildConcatStringOfAlCaReco( [ 'StreamExpress' ], alCaRecoMatrix[ 'pp' ] ),
             'allForExpressCosmics'     : buildConcatStringOfAlCaReco( [ 'ExpressCosmics' ], alCaRecoMatrix[ 'cosmics' ] ),
             'allForPrompt'             : buildConcatStringOfAlCaReco( [ 'Commissioning', 'DoubleElectron', 'DoubleMu', 'DoubleMuParked', 'MinimumBias', 'MuOnia', 'MuOniaParked', 'SingleElectron', 'SingleMu', ], alCaRecoMatrix[ 'pp' ] ),
             'allForPromptCosmics'      : buildConcatStringOfAlCaReco( [ 'Cosmics' ], alCaRecoMatrix[ 'cosmics' ] ),
             'allForExpressRun2'        : buildConcatStringOfAlCaReco( [ 'StreamExpress' ], alCaRecoMatrix[ 'ppRun2' ] ),
             'allForExpressCosmicsRun2' : buildConcatStringOfAlCaReco( [ 'ExpressCosmics' ], alCaRecoMatrix[ 'cosmicsRun2' ] ),
             'allForPromptRun2'         : buildConcatStringOfAlCaReco( [ 'Charmonium', 'Commissioning', 'DoubleEG', 'DoubleMu', 'HLTPhysics', 'JetHT', 'MET', 'MuOnia', 'SingleElectron', 'SingleMu', 'SinglePhoton', 'ZeroBias', ], alCaRecoMatrix[ 'ppRun2' ] ),
             'allForPromptCosmicsRun2'  : buildConcatStringOfAlCaReco( [ 'Cosmics' ], alCaRecoMatrix[ 'cosmicsRun2' ] ),
             }
#autoAlca.update(alCaRecoMatrix)
